# Workflow name
name: Continuous Deployment

# This allows manual start of the pipeline as needed.
on: 
  push:
    branches:
      - main
  workflow_dispatch:

# The list of jobs to run 
jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:

      # 1. Configure AWS credentials      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # 2. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main
      
      # 3. Create the GMapsApiKey.json file from Actions Secrets
      - name: Echo secret to file
        run: |
          mkdir -p src/assets/keys/ && echo $GOOGLE_MAPS_API_KEY > src/assets/keys/GMapsApiKey.json
        shell: bash
        env:
          # Feel free to rename this variable, but make sure to update it everywhere. You should paste your entire file in your secrets
          GOOGLE_MAPS_API_KEY : ${{ secrets.GOOGLE_MAPS_API_KEY }}

      # 4. Setup Node
      - name: Setup Node 
        uses: actions/setup-node@v3
        with:
          node-version: '22.17.1'
          
      # 5. Setup Cache
      - name: Setup Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 6. Build Angular
      - name: Build Angular Application
        run: |
          ls
          npm install -g @angular/cli
          npm install
          ng build -c production
          
      # 7. Copy to S3 bucket.
      - name: Copy to S3 Bucket
        run: |
          aws s3 cp ./dist/* s3://hobo-bob.com --recursive --sse AES256
          
      # 8. Invalidate CloudFront
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
